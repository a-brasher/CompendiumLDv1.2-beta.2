/********************************************************************************
 *                                                                              *
 *  (c) Copyright 2009 Verizon Communications USA and The Open University UK    *
 *                                                                              *
 *  This software is freely distributed in accordance with                      *
 *  the GNU Lesser General Public (LGPL) license, version 3 or later            *
 *  as published by the Free Software Foundation.                               *
 *  For details see LGPL: http://www.fsf.org/licensing/licenses/lgpl.html       *
 *               and GPL: http://www.fsf.org/licensing/licenses/gpl-3.0.html    *
 *                                                                              *
 *  This software is provided by the copyright holders and contributors "as is" *
 *  and any express or implied warranties, including, but not limited to, the   *
 *  implied warranties of merchantability and fitness for a particular purpose  *
 *  are disclaimed. In no event shall the copyright owner or contributors be    *
 *  liable for any direct, indirect, incidental, special, exemplary, or         *
 *  consequential damages (including, but not limited to, procurement of        *
 *  substitute goods or services; loss of use, data, or profits; or business    *
 *  interruption) however caused and on any theory of liability, whether in     *
 *  contract, strict liability, or tort (including negligence or otherwise)     *
 *  arising in any way out of the use of this software, even if advised of the  *
 *  possibility of such damage.                                                 *
 *                                                                              *
 ********************************************************************************/

package com.compendium.learningdesign.mappers;

import java.util.*;

import com.compendium.ProjectCompendium;
import com.compendium.ui.stencils.DraggableStencilIcon;
import com.compendium.learningdesign.core.ILdCoreConstants;
import com.compendium.learningdesign.core.LdTypeTagMaps;
import com.compendium.learningdesign.textprocessing.*;

/**
 * Objects of the TaskVerbToToolsMapper class take Strings as input and 
 * generate sets of DragableStencilIcons representing tools as output.
 * To do this, class ActivityLabelProcessor is used to process Strings
 * generated by user input to node labels.
 *  
 * @author ajb785
 *
 */
public class TaskVerbToToolsMapper extends LdToolMapper {
	/**
	 * @uml.property  name="oLabelProcessor"
	 * @uml.associationEnd  multiplicity="(1 1)"
	 */
	private ActivityLabelProcessor oLabelProcessor = null;
	
	
	

	/**
	 * 
	 */
	public TaskVerbToToolsMapper() {
		super();
		oLabelProcessor = ProjectCompendium.APP.getActivityLabelProcessor();
	}

	/* (non-Javadoc)
	 * @see com.compendium.ui.learningdesign.mappers.LdToolMapper#getToolNames(java.lang.String)
	 */
	@Override
	public HashSet<String> getToolNames(String label) {
		// TODO Auto-generated method stub
		return null;
	}

	
	/* 
	 * Returns a set of DraggableStencilIcon tool stencils, which are tagged
	 * with the relevant tool tag and appropriately labelled (i.e with 
	 * the tool name.
	 * (non-Javadoc)
	 * @see com.compendium.ui.learningdesign.mappers.LdToolMapper#getToolStencils(java.lang.String)
	 */
	@Override
	public HashSet<DraggableStencilIcon> getToolStencils(String sText) {
		HashSet<DraggableStencilIcon> oIconSet = new HashSet<DraggableStencilIcon>();
		DraggableStencilIcon oIconTemp = null;
		//Get the set of tag ids representing tool types relevant to the string sText
		HashSet<String> hsToolTags = oLabelProcessor.getTagSetForWord(sText);
		HashSet<Integer> hsToolIntegers = oLabelProcessor.getToolSetForWord(sText);
		LdTypeTagMaps oLdTypeTagMaps = ProjectCompendium.APP.getLdTypeTagMaps();
		int relatedToolType = 0;
		// Get the DraggableStencilIcon for a VLE Tool
		Vector vItems =  this.getLDStencilSet().getItemsWithTag(ILdCoreConstants.sVLE_TOOL_TAG );
		// Set the label of the copy to be the name of the related tool.
//		String relatedToolName = oLdTypeTagMaps.getHtToolTypeToToolNamesTable().get(relatedToolType);
		// Iterate through the related tools  and create DraggableStencilIcons to represent them
		Iterator<String> it = hsToolTags.iterator();
		String sTagId; String sTag;
		while (it.hasNext())	{
			oIconTemp = ((DraggableStencilIcon) vItems.get(0)).duplicate();
			sTagId = it.next();
			sTag = oLdTypeTagMaps.getCodesToTagsTable().get(sTagId);
			relatedToolType =  oLdTypeTagMaps.getTagtoSubTypesTable().get(sTag); 
			String relatedToolName = oLdTypeTagMaps.getToolTypeToToolNamesTable().get(relatedToolType);
			oIconTemp.setLabel(relatedToolName);
			String sCodeId = oLdTypeTagMaps.getTagsToCodesTable().get(sTag);
			oIconTemp.addTag(sCodeId);
			oIconTemp.setToolTipText(relatedToolName);
			// Add this new DraggableStencilIcon to oIconSet
			oIconSet.add(oIconTemp);
		}
		return oIconSet;
	}

	/**
	 * Generates a  set of DraggableStencilIcons related to the multiword phrase
	 * @param phrase - a multiword phrase i.e a string with whitespace between words
	 * @return the HashSet of DraggableStencilIcon tools  associated with the phrase, or
	 * null if there are none related/mapped to phrase.
	 */
	public  HashSet<DraggableStencilIcon> getToolStencilsForPhrase(String phrase)	{
		HashSet<DraggableStencilIcon> oIconSet = new HashSet<DraggableStencilIcon>();
		return oIconSet;		
	}


}
